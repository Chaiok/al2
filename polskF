#define _CRT_SECURE_NO_WARNINGS

#include <iostream>

#include <string>

#include <sstream>

#include <stack>

#include "Stack.h"

using namespace std;

string IntToStr(double Val)

{

	string result;

	std::ostringstream ost;

	ost << Val;

	result = ost.str();

	return result;

}
int typef(string a)
{
	char c = a[0];
	switch (c) {
	case '+': return 1;
	case '-': return 1;
	case '*': return 3;
	case '/': return 3;
	case '(': return 4;
	default: return 2;
	}
}
int ji = 0;
void perestroika(string* old,string* neew,int kolvo)
{
	string k;
	int f = 0;
	for (int i = 0; i < kolvo; i++)
	{
		if (f != 0 && old[i] == ")")
		{
			neew[ji] = ")";
			ji++;
			neew[ji] = ")";
			ji++;
			f--;
		}
		else if (((i!=kolvo-1 && old[i + 1] == "*" || old[i + 1] == "/" )&& old[i]!=")" )&& (ji==0 || (ji != 0 && neew[ji-1] != ")")))
		{
			//1+(2*7+1*(7+3)+7*(1*3))
			neew[ji] = "(";
			ji++;
			f++;
			neew[ji] = old[i]; //доб числа
			ji++;
			i++;
			neew[ji] = old[i]; //доб */
			ji++;
			int k = 1;
			while (k == 1)
			{
				if (i + 1 == kolvo)
				{
					neew[ji] = ")";
					f--;
					ji++;
					k = 0;
				}
				else if (old[i + 1] == "(" || old[i + 1] == ")")
					k = 0;
				else if (old[i + 1] == "+" || old[i + 1] == "-")
				{
					k = 0;
					neew[ji] = ")";
					f--;
					ji++;
				}
				else
				{
					i++;
					neew[ji] = old[i];
					ji++;
				}
			}
		}
		else
		{
			neew[ji] = old[i];
			ji++;
		}
	}
}

int main() {
	//(6+10-4)/(1+1*2)+1
	int l = 0;
	string k;
	string formula[100];
	string newformula[100];
	cin >> k;
	while (k != "q")
	{
		formula[l] = k;
		l++;
		cin >> k;
	}
	perestroika(formula, newformula, l);
	/*
	0 ничего
	1 +-
	2 переменные
	3 умножение деление
	4 скобка
	*/
	for (int i = 0; i < ji; i++)
		cout << newformula[i];
	cout << endl;
	int f = 0;
	stack <string> stcF;
	stack <string> stc;
	for (int i = 0; i < ji; i++) //перевод
	{
		k = newformula[i];
		char c = k[0];
		switch (c) {
		case '+':
			if (f == 0)
			{
				stc.push(k);
				f = 1;
			}
			else if (f == 1)
			{
				stcF.push(stc.top());
				stc.pop();
				if (stc.empty())
					f = 0;
				else f = typef(stc.top());
				i--;
			}
			else if (f == 2)
			{
				stcF.push(stc.top());
				stc.pop();
				if (stc.empty())
					f = 0;
				else f = typef(stc.top());
				i--;
			}
			else if (f == 3)
			{
				stcF.push(stc.top());
				stc.pop();
				if (stc.empty())
					f = 0;
				else f = typef(stc.top());
				i--;
			}
			else if (f == 4)
			{
				stc.push(k);
				f = 1;
			}
			break;
		case '-':
			if (f == 0)
			{
				stc.push(k);
				f = 1;
			}
			else if (f == 1)
			{
				stcF.push(stc.top());
				stc.pop();
				if (stc.empty())
					f = 0;
				else f = typef(stc.top());
				i--;
			}
			else if (f == 2)
			{
				stcF.push(stc.top());
				stc.pop();
				if (stc.empty())
					f = 0;
				else f = typef(stc.top());
				i--;
			}
			else if (f == 3)
			{
				stcF.push(stc.top());
				stc.pop();
				if (stc.empty())
					f = 0;
				else f = typef(stc.top());
				i--;
			}
			else if (f == 4)
			{
				stc.push(k);
				f = 1;
			}
			break;
		case '*':
			if (f == 0)
			{
				stc.push(k);
				f = 3;
			}
			else if (f == 1)
			{
				stc.push(k);
				f = 3;
			}
			else if (f == 2)
			{
				stc.push(k);
				f = 3;
			}
			else if (f == 3)
			{
				stcF.push(stc.top());
				stc.pop();
				if (stc.empty())
					f = 0;
				else f = typef(stc.top());
				i--;
			}
			else if (f == 4)
			{
				stc.push(k);
				f = 3;
			}
			break;
		case '/':
			if (f == 0)
			{
				stc.push(k);
				f = 3;
			}
			else if (f == 1)
			{
				stc.push(k);
				f = 3;
			}
			else if (f == 2)
			{
				stc.push(k);
				f = 3;
			}
			else if (f == 3)
			{
				stcF.push(stc.top());
				stc.pop();
				if (stc.empty())
					f = 0;
				else f = typef(stc.top());
				i--;
			}
			else if (f == 4)
			{
				stc.push(k);
				f = 3;
			}
			break;
		case '(':
			stc.push(k);
			f = 4;
			break;
		case ')':
			if (f == 0)
			{
				cout << "Error: пусто перед закрывающейся скобкой";
				system("pause");
			}
			else if (f == 1)
			{
				stcF.push(stc.top());
				stc.pop();
				if (stc.empty())
					f = 0;
				else f = typef(stc.top());
				i--;
			}
			else if (f == 2)
			{
				stcF.push(stc.top());
				stc.pop();
				if (stc.empty())
					f = 0;
				else f = typef(stc.top());
				i--;
			}
			else if (f == 3)
			{
				stcF.push(stc.top());
				stc.pop();
				if (stc.empty())
					f = 0;
				else f = typef(stc.top());
				i--;
			}
			else if (f == 4)
			{
				stc.pop();
				if (stc.empty())
					f = 0;
				else f = typef(stc.top());
			}
			break;
		default:
			if (f == 0)
			{
				stcF.push(k);
			}
			else if (f == 1)
			{
				stcF.push(k);
				stcF.push(stc.top());
				stc.pop();
				if (stc.empty())
					f = 0;
				else f = typef(stc.top());
			}
			else if (f == 2)
			{
				stcF.push(k);
				stcF.push(stc.top());
				stc.pop();
				if (stc.empty())
					f = 0;
				else f = typef(stc.top());
			}
			else if (f == 3)
			{
				stcF.push(k);
				stcF.push(stc.top());
				stc.pop();
				if (stc.empty())
					f = 0;
				else f = typef(stc.top());
			}
			else if (f == 4)
			{
				stcF.push(k);
			}
			break;
		}
	}
	while (!stc.empty())
	{
		stcF.push(stc.top());
		stc.pop();
	}
	/*while (!stcF.empty())
	{
		cout << stcF.top() << endl;
		stcF.pop();
	}*/
	ji = stcF.size();
	string* mas = new string[ji];
	for (int i = ji - 1; i >= 0; i--)
	{
		mas[i] = stcF.top();
		stcF.pop();
	}
	cout << "mas: ";
	for (int i = 0; i < ji; i++)
	{
		cout << mas[i];
	}
	cout << endl;
	Stack* sc = new Stack;
	//(6+10-4)/(1+1*2)+1
	string result, d;
	for (int i = 0; i < ji; i++)
	{
		double a, b;
		char c = mas[i][0];
		switch (c) {
		case '+':

			a = atof(sc->out().c_str());

			sc->pop();

			b = atof(sc->out().c_str());

			sc->pop();

			b = a + b;

			d = IntToStr(b);

			sc->push(d);

			break;

		case '-':

			a = atof(sc->out().c_str());

			sc->pop();

			b = atof(sc->out().c_str());

			sc->pop();

			b = b - a;

			d = IntToStr(b);

			sc->push(d);

			break;

		case '*':

			a = atof(sc->out().c_str());

			sc->pop();

			b = atof(sc->out().c_str());

			sc->pop();

			b = a * b;

			d = IntToStr(b);

			sc->push(d);

			break;

		case '/':

			a = atof(sc->out().c_str());

			sc->pop();

			b = atof(sc->out().c_str());

			sc->pop();

			b = b / a;

			d = IntToStr(b);

			sc->push(d);

			break;

		default:

			string f;

			f = mas[i];

			sc->push(f);

		}

	}
	delete[] mas;

	result = sc->out();

	cout << result << endl;

	system("pause");
}
//#include <iostream>
//using namespace std;
//
//class Stack
//{
//private:
//	string* S = new string[10];
//	int top = -1;
//public:
//	int empty()
//	{
//		if (top == -1)
//			return 1;
//		else return 0;
//	}
//	int poln()
//	{
//		if (top == 9)
//			return 1;
//		else return 0;
//	}
//	void push(string x)
//	{
//		if (poln())
//			cout << "push_polniy" << endl;
//		else {
//			top = top + 1;
//			S[top] = x;
//		}
//	}
//	void pop()
//	{
//		if (empty())
//			cout << "pop_Pust" << endl;
//		else {
//			top--;
//		}
//	}
//	string out()
//	{
//		if (empty())
//			cout << "out_Pust" << endl;
//		else return S[top];
//	}
//	int toper()
//	{
//		return top + 1;
//	}
//};
