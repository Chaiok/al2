#define _CRT_SECURE_NO_WARNINGS

#include <iostream>

#include <string>

#include <sstream>

#include <stack>

using namespace std;

//int a;

//char b;

//b = static_cast<char>(a);

string IntToStr(double Val)

{

	string result;

	std::ostringstream ost;

	ost << Val;

	result = ost.str();

	return result;

}
int typef(string a)
{
	char c = a[0];
	switch (c) {
	case '+': return 1;
	case '-': return 1;
	case '*': return 3;
	case '/': return 3;
	case '(': return 4;
	default: return 2;
	}
}

int main() {
	string mas[13] = { "6", "10", "+", "4", "-", "1", "1", "2", "*", "+", "/", "1", "+" }; //уже в обратном польском(52+)
	//string mas[3] = { "15", "9", "/"}; //уже в обратном польском(52+)
	//(6+10-4)/(1+1*2)+1
	int l=0;
	string k;
	string formula[100];
	cin >> k;
	while (k != "q")
	{
		formula[l] = k;
		l++;
		cin >> k;
	}
	/*
	0 ничего
	1 +-
	2 переменные 
	3 умножение деление
	4 скобка
	*/
	int f = 0;
	stack <string> stcF;
	stack <string> stc;
	for (int i = 0; i < l; i++)
	{
		k = formula[i];
		char c = k[0];
		switch (c) {
		case '+': 
			if (f == 0)
			{
				stc.push(k);
				f = 1;
			}
			else if (f == 1)
			{
				stcF.push(stc.top());
				stc.pop();
				if (stc.empty())
					f = 0;
				else f = typef(stc.top());
				i--;
			}
			else if (f == 2)
			{
				stcF.push(stc.top());
				stc.pop();
				if (stc.empty())
					f = 0;
				else f = typef(stc.top());
				i--;
			}
			else if (f == 3)
			{
				stcF.push(stc.top());
				stc.pop();
				if (stc.empty())
					f = 0;
				else f = typef(stc.top());
				i--;
			}
			else if (f == 4)
			{
				stc.push(k);
				f = 1;
			}
			break;
		case '-': 
			if (f == 0)
			{
				stc.push(k);
				f = 1;
			}
			else if (f == 1)
			{
				stcF.push(stc.top());
				stc.pop();
				if (stc.empty())
					f = 0;
				else f = typef(stc.top());
				i--;
			}
			else if (f == 2)
			{
				stcF.push(stc.top());
				stc.pop();
				if (stc.empty())
					f = 0;
				else f = typef(stc.top());
				i--;
			}
			else if (f == 3)
			{
				stcF.push(stc.top());
				stc.pop();
				if (stc.empty())
					f = 0;
				else f = typef(stc.top());
				i--;
			}
			else if (f == 4)
			{
				stc.push(k);
				f = 1;
			}
			break;
		case '*': 
			if (f == 0)
			{
				stc.push(k);
				f = 3;
			}
			else if (f == 1)
			{
				stc.push(k);
				f = 3;
			}
			else if (f == 2)
			{
				stc.push(k);
				f = 3;
			}
			else if (f == 3)
			{
				stcF.push(stc.top());
				stc.pop();
				if (stc.empty())
					f = 0;
				else f = typef(stc.top());
				i--;
			}
			else if (f == 4)
			{
				stc.push(k);
				f = 3;
			}
			break;
		case '/': 
			if (f == 0)
			{
				stc.push(k);
				f = 3;
			}
			else if (f == 1)
			{
				stc.push(k);
				f = 3;
			}
			else if (f == 2)
			{
				stc.push(k);
				f = 3;
			}
			else if (f == 3)
			{
				stcF.push(stc.top());
				stc.pop();
				if (stc.empty())
					f = 0;
				else f = typef(stc.top());
				i--;
			}
			else if (f == 4)
			{
				stc.push(k);
				f = 3;
			}
			break;
		case '(': 
			stc.push(k);
			f = 4;
			break;
		case ')':
			if (f == 0)
			{
				cout << "Error: пусто перед закрывающейся скобкой";
				system("pause");
			}
			else if (f == 1)
			{
				stcF.push(stc.top());
				stc.pop();
				if (stc.empty())
					f = 0;
				else f = typef(stc.top());
				i--;
			}
			else if (f == 2)
			{
				stcF.push(stc.top());
				stc.pop();
				if (stc.empty())
					f = 0;
				else f = typef(stc.top());
				i--;
			}
			else if (f == 3)
			{
				stcF.push(stc.top());
				stc.pop();
				if (stc.empty())
					f = 0;
				else f = typef(stc.top());
				i--;
			}
			else if (f == 4)
			{
				stc.pop();
				if (stc.empty())
					f = 0;
				else f = typef(stc.top());
			}
			break;
		default: 
			if (f == 0)
			{
				stcF.push(k);
			}
			else if (f == 1)
			{
				stcF.push(k);
				stcF.push(stc.top());
				stc.pop();
				if (stc.empty())
					f = 0;
				else f = typef(stc.top());
			}
			else if (f == 2)
			{
				stcF.push(k);
				stcF.push(stc.top());
				stc.pop();
				if (stc.empty())
					f = 0;
				else f = typef(stc.top());
			}
			else if (f == 3)
			{
				stcF.push(k);
				stcF.push(stc.top());
				stc.pop();
				if (stc.empty())
					f = 0;
				else f = typef(stc.top());
			}
			else if (f == 4)
			{
				stcF.push(k);
			}
			break;
		}
	}
	while (!stc.empty())
	{
		stcF.push(stc.top());
		stc.pop();
	}
	while (!stcF.empty())
	{
		cout << stcF.top() << endl;
		stcF.pop();
	}

	system("pause");

	return 0;

}
